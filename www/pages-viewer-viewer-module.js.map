{"version":3,"sources":["./src/core/features/comments/pages/viewer/viewer.html","./src/core/features/comments/pages/viewer/viewer.module.ts","./src/core/features/comments/pages/viewer/viewer.page.ts","./src/core/features/comments/pages/viewer/viewer.scss"],"names":[],"mappings":"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","file":"pages-viewer-viewer-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>\\n            <core-format-text [text]=\\\"title\\\" [contextLevel]=\\\"contextLevel\\\" [contextInstanceId]=\\\"instanceId\\\" [courseId]=\\\"courseId\\\">\\n            </core-format-text>\\n        </h1>\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-button *ngIf=\\\"canDeleteComments\\\" slot=\\\"end\\\" fill=\\\"clear\\\" (click)=\\\"toggleDelete()\\\"\\n                [attr.aria-label]=\\\"'core.toggledelete' | translate\\\">\\n                <ion-icon name=\\\"fas-pen\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n            </ion-button>\\n            <core-context-menu>\\n                <core-context-menu-item [hidden]=\\\"!(commentsLoaded && !hasOffline)\\\" [priority]=\\\"100\\\"\\n                    [content]=\\\"'core.refresh' | translate\\\" (action)=\\\"refreshComments(false)\\\" [iconAction]=\\\"refreshIcon\\\"\\n                    [closeOnClick]=\\\"true\\\">\\n                </core-context-menu-item>\\n                <core-context-menu-item [hidden]=\\\"!(commentsLoaded && hasOffline)\\\" [priority]=\\\"100\\\"\\n                    [content]=\\\"'core.settings.synchronizenow' | translate\\\" (action)=\\\"refreshComments(true)\\\" [iconAction]=\\\"syncIcon\\\"\\n                    [closeOnClick]=\\\"false\\\">\\n                </core-context-menu-item>\\n            </core-context-menu>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!commentsLoaded\\\" (ionRefresh)=\\\"refreshComments(false, $event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"commentsLoaded\\\">\\n        <core-empty-box *ngIf=\\\"!comments || !comments.length\\\" icon=\\\"fas-comments\\\"\\n            [message]=\\\"'core.comments.nocomments' | translate\\\">\\n        </core-empty-box>\\n\\n        <!-- Load previous messages. -->\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" position=\\\"top\\\" (action)=\\\"loadPrevious($event)\\\" [error]=\\\"loadMoreError\\\">\\n        </core-infinite-loading>\\n\\n        <ion-list class=\\\"addon-messages-discussion-container\\\">\\n            <ng-container *ngFor=\\\"let comment of comments; index as index; last as last\\\">\\n\\n                <p class=\\\"ion-text-center addon-messages-date\\\" *ngIf=\\\"comment.showDate\\\">\\n                    {{ comment.timecreated * 1000 | coreFormatDate: \\\"strftimedayshort\\\" }}\\n                </p>\\n\\n                <ion-item class=\\\"ion-text-wrap addon-message\\\"\\n                    [class.addon-message-mine]=\\\"comment.userid == currentUserId\\\"\\n                    [class.addon-message-not-mine]=\\\"comment.userid != currentUserId\\\"\\n                    [class.addon-message-no-user]=\\\"!comment.showUserData\\\"\\n                    [@coreSlideInOut]=\\\"comment.userid == currentUserId ? '' : 'fromLeft'\\\">\\n                    <ion-label>\\n                        <!-- User data. -->\\n                        <h2 class=\\\"addon-message-user\\\" *ngIf=\\\"comment.showUserData\\\">\\n                            <core-user-avatar slot=\\\"start\\\" [user]=\\\"comment\\\" [linkProfile]=\\\"false\\\">\\n                            </core-user-avatar>\\n                            <div>{{ comment.fullname }}</div>\\n                        </h2>\\n\\n                        <p class=\\\"addon-message-text\\\">\\n                            <core-format-text [text]=\\\"comment.content\\\" [contextLevel]=\\\"contextLevel\\\" [contextInstanceId]=\\\"instanceId\\\"\\n                                [courseId]=\\\"courseId\\\">\\n                            </core-format-text>\\n                        </p>\\n                    </ion-label>\\n                    <ion-note>\\n                        <ng-container *ngIf=\\\"!comment.deleted\\\">\\n                            {{ comment.timecreated * 1000 | coreFormatDate: 'strftimetime' }}\\n                        </ng-container>\\n                        <ng-container *ngIf=\\\"comment.deleted\\\">\\n                            <ion-icon name=\\\"fas-trash\\\" aria-hidden=\\\"true\\\"></ion-icon> <span class=\\\"ion-text-wrap\\\">\\n                                {{ 'core.deletedoffline' | translate }}\\n                            </span>\\n                        </ng-container>\\n                    </ion-note>\\n                    <div class=\\\"tail\\\" *ngIf=\\\"comment.showTail\\\"></div>\\n                    <ion-button *ngIf=\\\"showDelete && !comment.deleted && comment.delete\\\" slot=\\\"end\\\" fill=\\\"clear\\\"\\n                        [@coreSlideInOut]=\\\"'fromRight'\\\" color=\\\"danger\\\" (click)=\\\"deleteComment($event, comment)\\\"\\n                        [attr.aria-label]=\\\"'core.delete' | translate\\\" class=\\\"addon-messages-delete-button\\\">\\n                        <ion-icon name=\\\"fas-trash\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    </ion-button>\\n                    <ion-button *ngIf=\\\"showDelete && comment.deleted\\\" slot=\\\"end\\\" fill=\\\"clear\\\" color=\\\"danger\\\"\\n                        (click)=\\\"undoDeleteComment($event, comment)\\\" [attr.aria-label]=\\\"'core.restore' | translate\\\"\\n                        class=\\\"addon-messages-delete-button\\\">\\n                        <ion-icon name=\\\"fas-undo-alt\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    </ion-button>\\n                </ion-item>\\n            </ng-container>\\n\\n            <ion-item\\n                *ngIf=\\\"offlineComment\\\"\\n                class=\\\"ion-text-wrap addon-message addon-message-mine\\\"\\n            >\\n                <ion-label>\\n                    <!-- User data. -->\\n                    <p class=\\\"ion-text-center\\\">\\n                        <ion-icon name=\\\"fas-exclamation-triangle\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                        {{ 'core.thereisdatatosync' | translate:{$a: 'core.comments.comments' | translate | lowercase } }}\\n                    </p>\\n\\n                    <p class=\\\"addon-message-text\\\">\\n                        <core-format-text [text]=\\\"offlineComment.content\\\" [contextLevel]=\\\"contextLevel\\\" [contextInstanceId]=\\\"instanceId\\\"\\n                            [courseId]=\\\"courseId\\\">\\n                        </core-format-text>\\n                    </p>\\n                </ion-label>\\n                <ion-note>\\n                    <ion-icon name=\\\"fas-clock\\\" aria-hidden=\\\"true\\\"></ion-icon> {{ 'core.notsent' | translate }}\\n                </ion-note>\\n                <div class=\\\"tail\\\"></div>\\n                <ion-button *ngIf=\\\"showDelete\\\" slot=\\\"end\\\" fill=\\\"clear\\\"\\n                    [@coreSlideInOut]=\\\"'fromRight'\\\" color=\\\"danger\\\" (click)=\\\"deleteComment($event, offlineComment)\\\"\\n                    [attr.aria-label]=\\\"'core.delete' | translate\\\" class=\\\"addon-messages-delete-button\\\">\\n                    <ion-icon name=\\\"fas-trash\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                </ion-button>\\n            </ion-item>\\n        </ion-list>\\n\\n    </core-loading>\\n</ion-content>\\n<ion-footer color=\\\"light\\\" class=\\\"footer-adjustable\\\" *ngIf=\\\"commentsLoaded && canAddComments\\\">\\n    <ion-toolbar color=\\\"light\\\">\\n        <core-send-message-form [sendDisabled]=\\\"sending\\\" [message]=\\\"newComment\\\"\\n            (onSubmit)=\\\"addComment($event)\\\" [placeholder]=\\\"'core.comments.addcomment' | translate\\\">\\n        </core-send-message-form>\\n    </ion-toolbar>\\n</ion-footer>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreCommentsViewerPage } from './viewer.page';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CoreCommentsViewerPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        CoreCommentsViewerPage,\n    ],\n    exports: [RouterModule],\n})\nexport class CoreCommentsViewerPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreAnimations } from '@components/animations';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreSites } from '@services/sites';\nimport {\n    CoreComments,\n    CoreCommentsCommentBasicData,\n    CoreCommentsData,\n    CoreCommentsProvider,\n} from '@features/comments/services/comments';\nimport {\n    CoreCommentsSync,\n    CoreCommentsSyncProvider,\n} from '@features/comments/services/comments-sync';\nimport { IonContent, IonRefresher } from '@ionic/angular';\nimport { ContextLevel, CoreConstants } from '@/core/constants';\nimport { CoreNavigator } from '@services/navigator';\nimport { Translate } from '@singletons';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCommentsOffline } from '@features/comments/services/comments-offline';\nimport { CoreCommentsDBRecord } from '@features/comments/services/database/comments';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreApp } from '@services/app';\nimport moment from 'moment';\n\n/**\n * Page that displays comments.\n */\n@Component({\n    selector: 'page-core-comments-viewer',\n    templateUrl: 'viewer.html',\n    animations: [CoreAnimations.SLIDE_IN_OUT],\n    styleUrls: ['viewer.scss'],\n})\nexport class CoreCommentsViewerPage implements OnInit, OnDestroy {\n\n    @ViewChild(IonContent) content?: IonContent;\n\n    comments: CoreCommentsDataToDisplay[] = [];\n    commentsLoaded = false;\n    contextLevel!: ContextLevel;\n    instanceId!: number;\n    componentName!: string;\n    itemId = 0;\n    area = '';\n    page = 0;\n    title = '';\n    courseId?: number;\n    canLoadMore = false;\n    loadMoreError = false;\n    canAddComments = false;\n    canDeleteComments = false;\n    showDelete = false;\n    hasOffline = false;\n    refreshIcon = CoreConstants.ICON_LOADING;\n    syncIcon = CoreConstants.ICON_LOADING;\n    offlineComment?: CoreCommentsOfflineWithUser;\n    currentUserId: number;\n    sending = false;\n    newComment = '';\n\n    protected addDeleteCommentsAvailable = false;\n    protected syncObserver?: CoreEventObserver;\n    protected viewDestroyed = false;\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n\n        // Refresh data if comments are synchronized automatically.\n        this.syncObserver = CoreEvents.on(CoreCommentsSyncProvider.AUTO_SYNCED, (data) => {\n            if (data.contextLevel == this.contextLevel && data.instanceId == this.instanceId &&\n                    data.componentName == this.componentName && data.itemId == this.itemId && data.area == this.area) {\n                // Show the sync warnings.\n                this.showSyncWarnings(data.warnings);\n\n                // Refresh the data.\n                this.commentsLoaded = false;\n                this.refreshIcon = CoreConstants.ICON_LOADING;\n                this.syncIcon = CoreConstants.ICON_LOADING;\n\n                this.page = 0;\n                this.comments = [];\n                this.fetchComments(false);\n            }\n        }, CoreSites.getCurrentSiteId());\n    }\n\n    /**\n     * View loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        // Is implicit the user can delete if he can add.\n        this.addDeleteCommentsAvailable = await CoreComments.isAddCommentsAvailable();\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n\n        this.commentsLoaded = false;\n        this.contextLevel = CoreNavigator.getRouteParam<ContextLevel>('contextLevel')!;\n        this.instanceId = CoreNavigator.getRouteNumberParam('instanceId')!;\n        this.componentName = CoreNavigator.getRouteParam<string>('componentName')!;\n        this.itemId = CoreNavigator.getRouteNumberParam('itemId')!;\n        this.area = CoreNavigator.getRouteParam('area') || '';\n        this.title = CoreNavigator.getRouteNumberParam('title') ||\n            Translate.instant('core.comments.comments');\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId');\n\n        await this.fetchComments(true);\n    }\n\n    /**\n     * Fetches the comments.\n     *\n     * @param sync When to resync comments.\n     * @param showErrors When to display errors or not.\n     * @return Resolved when done.\n     */\n    protected async fetchComments(sync: boolean, showErrors = false): Promise<void> {\n        this.loadMoreError = false;\n\n        if (sync) {\n            await CoreUtils.ignoreErrors(this.syncComments(showErrors));\n        }\n\n        try {\n            // Get comments data.\n            const commentsResponse = await CoreComments.getComments(\n                this.contextLevel,\n                this.instanceId,\n                this.componentName,\n                this.itemId,\n                this.area,\n                this.page,\n            );\n            this.canAddComments = this.addDeleteCommentsAvailable && !!commentsResponse.canpost;\n\n            let comments = commentsResponse.comments.sort((a, b) => a.timecreated - b.timecreated);\n            if (typeof commentsResponse.count != 'undefined') {\n                this.canLoadMore = (this.comments.length + comments.length) < commentsResponse.count;\n            } else {\n                // Old style.\n                this.canLoadMore = commentsResponse.comments.length > 0 &&\n                    commentsResponse.comments.length >= CoreCommentsProvider.pageSize;\n            }\n\n            comments = await Promise.all(comments.map((comment) => this.loadCommentProfile(comment)));\n\n            this.comments = comments.concat(this.comments);\n\n            this.comments.forEach((comment, index) => {\n                comment.showDate = this.showDate(comment, this.comments[index - 1]);\n                comment.showUserData = this.showUserData(comment, this.comments[index - 1]);\n                comment.showTail = this.showTail(comment, this.comments[index + 1]);\n            });\n\n            this.canDeleteComments = this.addDeleteCommentsAvailable &&\n                (this.hasOffline || this.comments.some((comment) => !!comment.delete));\n\n            await this.loadOfflineData();\n        } catch (error) {\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\n            if (error && this.componentName == 'assignsubmission_comments') {\n                CoreDomUtils.showAlertTranslated('core.notice', 'core.comments.commentsnotworking');\n            } else {\n                CoreDomUtils.showErrorModalDefault(error, Translate.instant('core.error') + ': get_comments');\n            }\n        } finally {\n            this.commentsLoaded = true;\n            this.refreshIcon = CoreConstants.ICON_REFRESH;\n            this.syncIcon = CoreConstants.ICON_SYNC;\n\n            if (this.page == 0) {\n                this.scrollToBottom();\n            }\n        }\n\n    }\n\n    /**\n     * Function to load more commemts.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @return Resolved when done.\n     */\n    loadPrevious(infiniteComplete?: () => void): Promise<void> {\n        this.page++;\n        this.canLoadMore = false;\n\n        return this.fetchComments(true).finally(() => {\n            infiniteComplete && infiniteComplete();\n        });\n    }\n\n    /**\n     * Refresh the comments.\n     *\n     * @param showErrors Whether to display errors or not.\n     * @param refresher Refresher.\n     * @return Resolved when done.\n     */\n    async refreshComments(showErrors: boolean, refresher?: IonRefresher): Promise<void> {\n        this.commentsLoaded = false;\n        this.refreshIcon = CoreConstants.ICON_LOADING;\n        this.syncIcon = CoreConstants.ICON_LOADING;\n\n        try {\n            await this.invalidateComments();\n        } finally {\n            this.page = 0;\n            this.comments = [];\n\n            try {\n                await this.fetchComments(true, showErrors);\n            } finally {\n                refresher?.complete();\n            }\n        }\n    }\n\n    /**\n     * Show sync warnings if any.\n     *\n     * @param warnings the warnings\n     */\n    private showSyncWarnings(warnings: string[]): void {\n        const message = CoreTextUtils.buildMessage(warnings);\n        if (message) {\n            CoreDomUtils.showErrorModal(message);\n        }\n    }\n\n    /**\n     * Tries to synchronize comments.\n     *\n     * @param showErrors Whether to display errors or not.\n     * @return Promise resolved if sync is successful, rejected otherwise.\n     */\n    private async syncComments(showErrors: boolean): Promise<void> {\n        try {\n            const result = await CoreCommentsSync.syncComments(\n                this.contextLevel,\n                this.instanceId,\n                this.componentName,\n                this.itemId,\n                this.area,\n            );\n            this.showSyncWarnings(result?.warnings || []);\n        } catch (error) {\n            if (showErrors) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\n            }\n\n            throw new CoreError(error);\n        }\n    }\n\n    /**\n     * Send the comment or store it offline.\n     *\n     * @param text Comment text to add.\n     */\n    async addComment(text: string): Promise<void> {\n        CoreApp.closeKeyboard();\n        const loadingModal = await CoreDomUtils.showModalLoading('core.sending', true);\n        // Freeze the add comment button.\n        this.sending = true;\n        try {\n            const commentsResponse = await CoreComments.addComment(\n                text,\n                this.contextLevel,\n                this.instanceId,\n                this.componentName,\n                this.itemId,\n                this.area,\n            );\n\n            CoreDomUtils.showToast(\n                commentsResponse ? 'core.comments.eventcommentcreated' : 'core.datastoredoffline',\n                true,\n                3000,\n            );\n\n            if (commentsResponse) {\n                this.invalidateComments();\n\n                const addedComments = await this.loadCommentProfile(commentsResponse);\n                addedComments.showDate = this.showDate(addedComments, this.comments[this.comments.length - 1]);\n                addedComments.showUserData = this.showUserData(addedComments, this.comments[this.comments.length - 1]);\n                addedComments.showTail = this.showTail(addedComments, this.comments[this.comments.length + 1]);\n\n                // Add the comment to the top.\n                this.comments = this.comments.concat([addedComments]);\n                this.canDeleteComments = this.addDeleteCommentsAvailable;\n\n                CoreEvents.trigger(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, {\n                    contextLevel: this.contextLevel,\n                    instanceId: this.instanceId,\n                    component: this.componentName,\n                    itemId: this.itemId,\n                    area: this.area,\n                    countChange: 1,\n                }, CoreSites.getCurrentSiteId());\n\n            } else if (commentsResponse === false) {\n                // Comments added in offline mode.\n                await this.loadOfflineData();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        } finally {\n            loadingModal.dismiss();\n            this.sending = false;\n\n            // New comments.\n            this.scrollToBottom();\n        }\n    }\n\n    /**\n     * Delete a comment.\n     *\n     * @param e Click event.\n     * @param comment Comment to delete.\n     */\n    async deleteComment(e: Event, comment: CoreCommentsDataToDisplay | CoreCommentsOfflineWithUser): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const modified = 'lastmodified' in comment\n            ? comment.lastmodified\n            : comment.timecreated;\n        const time = CoreTimeUtils.userDate(\n            modified * 1000,\n            'core.strftimerecentfull',\n        );\n\n        const deleteComment: CoreCommentsCommentBasicData = {\n            contextlevel: this.contextLevel,\n            instanceid: this.instanceId,\n            component: this.componentName,\n            itemid: this.itemId,\n            area: this.area,\n            content: comment.content,\n            id: 'id' in comment ? comment.id : undefined,\n        };\n\n        try {\n            await CoreDomUtils.showDeleteConfirm('core.comments.deletecommentbyon', {\n                $a:\n                    { user: comment.fullname || '', time: time },\n            });\n        } catch {\n            // User cancelled, nothing to do.\n            return;\n        }\n\n        try {\n            const deletedOnline = await CoreComments.deleteComment(deleteComment);\n            this.showDelete = false;\n\n            if (deletedOnline && 'id' in comment) {\n                const index = this.comments.findIndex((commentinList) => commentinList.id == comment.id);\n\n                if (index >= 0) {\n                    this.comments.splice(index, 1);\n\n                    CoreEvents.trigger(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, {\n                        contextLevel: this.contextLevel,\n                        instanceId: this.instanceId,\n                        component: this.componentName,\n                        itemId: this.itemId,\n                        area: this.area,\n                        countChange: -1,\n                    }, CoreSites.getCurrentSiteId());\n                }\n            } else {\n                this.loadOfflineData();\n            }\n\n            this.invalidateComments();\n\n            CoreDomUtils.showToast('core.comments.eventcommentdeleted', true, 3000);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Delete comment failed.');\n        }\n    }\n\n    /**\n     * Invalidate comments.\n     *\n     * @return Resolved when done.\n     */\n    protected invalidateComments(): Promise<void> {\n        return CoreComments.invalidateCommentsData(\n            this.contextLevel,\n            this.instanceId,\n            this.componentName,\n            this.itemId,\n            this.area,\n        );\n    }\n\n    /**\n     * Loads the profile info onto the comment object.\n     *\n     * @param comment Comment object.\n     * @return Promise resolved with modified comment when done.\n     */\n    protected async loadCommentProfile(comment: CoreCommentsDataToDisplay): Promise<CoreCommentsDataToDisplay> {\n        // Get the user profile image.\n        try {\n            const user = await CoreUser.getProfile(comment.userid!, undefined, true);\n            comment.profileimageurl = user.profileimageurl;\n            comment.fullname = user.fullname;\n        } catch {\n            // Ignore errors.\n        }\n\n        return comment;\n\n    }\n\n    /**\n     * Check if the user info should be displayed for the current message.\n     * User data is only displayed if the previous message was from another user.\n     *\n     * @param comment Comment object.\n     * @param prevComment Previous comment object.\n     * @return Whether user data should be shown.\n     */\n    protected showUserData(\n        comment: CoreCommentsDataToDisplay,\n        prevComment?: CoreCommentsDataToDisplay,\n    ): boolean {\n        return comment.userid != this.currentUserId && (!prevComment || prevComment.userid != comment.userid || !!comment.showDate);\n    }\n\n    /**\n     * Check if a css tail should be shown.\n     *\n     * @param comment Comment object.\n     * @param nextComment Previous comment object.\n     * @return Whether user data should be shown.\n     */\n    protected showTail(\n        comment: CoreCommentsDataToDisplay,\n        nextComment?: CoreCommentsDataToDisplay,\n    ): boolean {\n        return !nextComment || nextComment.userid != comment.userid || !!nextComment.showDate;\n    }\n\n    /**\n     * Check if the date should be displayed between messages (when the day changes at midnight for example).\n     *\n     * @param comment Comment object.\n     * @param prevComment Previous comment object.\n     * @return True if messages are from diferent days, false othetwise.\n     */\n    protected showDate(\n        comment: CoreCommentsDataToDisplay,\n        prevComment?: CoreCommentsDataToDisplay,\n    ): boolean {\n        if (!prevComment) {\n            return true;\n        }\n\n        // Check if day has changed.\n        return !moment(comment.timecreated * 1000).isSame(prevComment.timecreated * 1000, 'day');\n    }\n\n    /**\n     * Load offline comments.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async loadOfflineData(): Promise<void> {\n        const promises: Promise<void>[] = [];\n        let hasDeletedComments = false;\n\n        // Load the only offline comment allowed if any.\n        promises.push(CoreCommentsOffline.getComment(\n            this.contextLevel,\n            this.instanceId,\n            this.componentName,\n            this.itemId,\n            this.area,\n        ).then(async (offlineComment) => {\n            this.offlineComment = offlineComment;\n\n            if (!offlineComment) {\n                return;\n            }\n\n            if (this.newComment == '') {\n                this.newComment = this.offlineComment!.content;\n            }\n\n            this.offlineComment!.userid = this.currentUserId;\n\n            return;\n        }));\n\n        // Load deleted comments offline.\n        promises.push(CoreCommentsOffline.getDeletedComments(\n            this.contextLevel,\n            this.instanceId,\n            this.componentName,\n            this.itemId,\n            this.area,\n        ).then((deletedComments) => {\n            hasDeletedComments = deletedComments && deletedComments.length > 0;\n\n            if (hasDeletedComments) {\n                deletedComments.forEach((deletedComment) => {\n                    const comment = this.comments.find((comment) => comment.id == deletedComment.commentid);\n\n                    if (comment) {\n                        comment.deleted = !!deletedComment.deleted;\n                    }\n                });\n            }\n\n            return;\n        }));\n\n        await Promise.all(promises);\n\n        this.hasOffline = !!this.offlineComment || hasDeletedComments;\n    }\n\n    /**\n     * Restore a comment.\n     *\n     * @param e Click event.\n     * @param comment Comment to delete.\n     */\n    async undoDeleteComment(e: Event, comment: CoreCommentsDataToDisplay): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        await CoreCommentsOffline.undoDeleteComment(comment.id);\n\n        comment.deleted = false;\n        this.showDelete = false;\n    }\n\n    /**\n     * Scroll bottom when render has finished.\n     */\n    protected scrollToBottom(): void {\n        // Need a timeout to leave time to the view to be rendered.\n        setTimeout(() => {\n            if (!this.viewDestroyed) {\n                this.content?.scrollToBottom();\n            }\n        }, 100);\n    }\n\n    /**\n     * Toggle delete.\n     */\n    toggleDelete(): void {\n        this.showDelete = !this.showDelete;\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.syncObserver?.off();\n        this.viewDestroyed = true;\n    }\n\n}\n\nexport type CoreCommentsDataToDisplay = CoreCommentsData & {\n    profileimageurl?: string;\n    fullname?: string;\n    deleted?: boolean;\n    showDate?: boolean;\n    showTail?: boolean;\n    showUserData?: boolean;\n};\n\nexport type CoreCommentsOfflineWithUser = CoreCommentsDBRecord & {\n    profileimageurl?: string;\n    fullname?: string;\n    userid?: number;\n    deleted?: boolean;\n};\n","export default \"/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/*\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/*\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n * Extracted from ionic.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host ion-content {\\n  --background: var(--background-alternative);\\n}\\n:host ion-content::part(scroll) {\\n  padding-bottom: 0 !important;\\n}\\n:host .addon-messages-discussion-container {\\n  display: flex;\\n  flex-direction: column;\\n  padding-bottom: 15px;\\n  background: var(--background-alternative);\\n}\\n:host .addon-messages-date {\\n  font-weight: normal;\\n  font-size: 0.9rem;\\n}\\n:host ion-item.addon-message {\\n  border: 0;\\n  border-radius: 4px;\\n  padding: 0 8px 0 8px;\\n  margin: 10px 8px 0 8px;\\n  --background: var(--addon-messages-message-bg);\\n  background: var(--background);\\n  align-self: flex-start;\\n  width: 90%;\\n  max-width: 90%;\\n  --min-height: var(--a11y-min-target-size);\\n  position: relative;\\n  transition: width 500ms ease-in-out;\\n  overflow: visible;\\n}\\n:host ion-item.addon-message::part(native) {\\n  --inner-border-width: 0;\\n  --inner-padding-end: 0;\\n  padding: 0;\\n  margin: 0;\\n}\\n:host ion-item.addon-message core-format-text > p:only-child {\\n  display: inline;\\n}\\n:host ion-item.addon-message .addon-message-user {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n  margin-bottom: 0.5rem;\\n  margin-top: 0;\\n  color: var(--ion-text-color);\\n}\\n:host ion-item.addon-message .addon-message-user core-user-avatar {\\n  display: block;\\n  --core-avatar-size: var(--addon-messages-avatar-size);\\n  margin: 0;\\n}\\n:host ion-item.addon-message .addon-message-user div {\\n  font-weight: 500;\\n  flex-grow: 1;\\n  padding-left: 0.5rem;\\n  padding-right: 0.5rem;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message .addon-message-user div {\\n    padding-left: unset;\\n    padding-right: unset;\\n    -webkit-padding-start: 0.5rem;\\n    padding-inline-start: 0.5rem;\\n    -webkit-padding-end: 0.5rem;\\n    padding-inline-end: 0.5rem;\\n  }\\n}\\n:host ion-item.addon-message ion-note {\\n  color: var(--addon-messages-message-note-text);\\n  font-size: var(--addon-messages-message-note-font-size);\\n  margin: 0;\\n  padding: 0 0 8px 0;\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message[tappable]:active {\\n  --background: var(--addon-messages-message-activated-bg);\\n}\\n:host ion-item.addon-message ion-label {\\n  margin: 0;\\n  padding: 8px 0;\\n}\\n:host ion-item.addon-message .addon-message-text {\\n  display: inline-flex;\\n}\\n:host ion-item.addon-message .addon-message-text * {\\n  color: var(--ion-text-color);\\n}\\n:host ion-item.addon-message .tail {\\n  content: \\\"\\\";\\n  width: 0;\\n  height: 0;\\n  border: 0.5rem solid transparent;\\n  position: absolute;\\n  touch-action: none;\\n  bottom: 0;\\n}\\n:host ion-item.addon-message.addon-message-mine {\\n  --background: var(--addon-messages-message-mine-bg);\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message.addon-message-mine[tappable]:active {\\n  --background: var(--addon-messages-message-mine-activated-bg);\\n}\\n:host ion-item.addon-message.addon-message-mine .spinner {\\n  float: right;\\n  margin-left: 5px;\\n  margin-right: -3px;\\n  margin-top: 2px;\\n  margin-bottom: -2px;\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-mine .spinner {\\n  float: left;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-mine .spinner {\\n    margin-left: unset;\\n    margin-right: unset;\\n    -webkit-margin-start: 5px;\\n    margin-inline-start: 5px;\\n    -webkit-margin-end: -3px;\\n    margin-inline-end: -3px;\\n  }\\n}\\n:host ion-item.addon-message.addon-message-mine .spinner svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n:host ion-item.addon-message.addon-message-mine .tail {\\n  right: -8px;\\n  margin-right: -0.5rem;\\n  border-bottom-color: var(--addon-messages-message-mine-bg);\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-mine .tail {\\n  left: unset;\\n  right: unset;\\n  left: -8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-mine .tail {\\n    margin-right: unset;\\n    -webkit-margin-end: -0.5rem;\\n    margin-inline-end: -0.5rem;\\n  }\\n}\\n:host ion-item.addon-message.addon-message-mine[tappable]:active .tail {\\n  border-bottom-color: var(--addon-messages-message-mine-activated-bg);\\n}\\n:host ion-item.addon-message.addon-message-not-mine .tail {\\n  border-bottom-color: var(--addon-messages-message-bg);\\n  left: -8px;\\n  margin-left: -0.5rem;\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-not-mine .tail {\\n  left: unset;\\n  right: unset;\\n  right: -8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-not-mine .tail {\\n    margin-left: unset;\\n    -webkit-margin-start: -0.5rem;\\n    margin-inline-start: -0.5rem;\\n  }\\n}\\n:host ion-item.addon-message[tappable].addon-message-not-mine.activated .tail {\\n  border-bottom-color: var(--addon-messages-message-activated-bg);\\n}\\n:host ion-item.addon-message .addon-messages-delete-button {\\n  min-height: initial;\\n  line-height: initial;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  height: var(--a11y-min-target-size) !important;\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message .addon-messages-delete-button ion-icon {\\n  font-size: 1.4em;\\n  line-height: initial;\\n  color: var(--ion-color-danger);\\n}\\n:host ion-item.addon-message.addon-message-no-user {\\n  margin-top: 8px;\\n}\\n:host ion-item.addon-message.addon-message-mine + ion-item.addon-message.addon-message-no-user.addon-message-mine,\\n:host ion-item.addon-message.addon-message-not-mine + ion-item.addon-message.addon-message-no-user.addon-message-not-mine {\\n  padding-top: 0;\\n}\\n:host ion-item.addon-message.addon-message-mine + ion-item.addon-message.addon-message-no-user.addon-message-mine .item-heading,\\n:host ion-item.addon-message.addon-message-not-mine + ion-item.addon-message.addon-message-no-user.addon-message-not-mine .item-heading {\\n  margin-bottom: 0;\\n}\\n:host-context(.ios) ion-footer .toolbar:last-child {\\n  padding-bottom: 4px;\\n  min-height: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";"],"sourceRoot":"webpack:///"}